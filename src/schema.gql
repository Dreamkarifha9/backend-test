# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role implements BasicData {
  active: Boolean!
  deleted: Boolean!
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  id: Float
  name: String!
}

interface BasicData {
  active: Boolean!
  deleted: Boolean!
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Feature implements BasicData {
  active: Boolean!
  deleted: Boolean!
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  id: Float
  name: String
  description: String
  slug: String
}

type Permission implements BasicData {
  active: Boolean!
  deleted: Boolean!
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  id: ID
  userId: String
  featureId: Float!
  isUsed: Boolean!
  users: User!
  feature: Feature!
}

type User implements BasicData {
  active: Boolean!
  deleted: Boolean!
  createdAt: DateTime
  createdBy: String
  updatedAt: DateTime
  updatedBy: String
  id: ID
  username: String
  firstName: String
  lastName: String
  email: String
  password: String
  roleId: Float!
  salt: String
  role: Role!
  permissions: [Permission!]!
}

type UserResponseDto {
  id: ID
  firstName: String
  lastName: String
  email: String
  role: Role!
  permissions: [Permission!]!
}

type LoggedUserOutput {
  """Generated token of the user"""
  token: String!
}

type PermissionResponseDto {
  id: ID
  userId: String
  featureId: Float!
  isUsed: Boolean!
}

type Query {
  words: [String!]!
  user(id: String!): UserResponseDto!
  users: [UserResponseDto!]!
}

type Mutation {
  createUser(input: CreateUserInput!): UserResponseDto!
  updateUser(id: String!, input: UpdateUserInput!): UserResponseDto!
  deleteUser(id: String!): Boolean!
  loginUser(loginUserInput: LoginUserInput!): LoggedUserOutput!
  createPermissions(input: [CreatePermissionInput!]!): [PermissionResponseDto!]!
  deletePermission(userId: String!): Boolean!
}

input CreateUserInput {
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  roleId: Float!
}

input UpdateUserInput {
  password: String
  username: String
  firstName: String
  lastName: String
  email: String
  roleId: Float
}

input LoginUserInput {
  """username of the user"""
  username: String!

  """password of the user"""
  password: String!
}

input CreatePermissionInput {
  userId: String!
  featureId: Float!
  isUsed: Boolean!
}